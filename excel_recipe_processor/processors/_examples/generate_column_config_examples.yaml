# excel_recipe_processor/processors/_examples/generate_column_config_examples.yaml
# Revision date: 2025-08-14

description: "Generate column configuration files by comparing raw and desired column structures from Excel or CSV files. Perfect for automating the tedious process of maintaining column configurations when manual reports change their structure."

basic_file_example:
  description: "Compare two files and generate column configuration"
  yaml: |
    settings:
      description: "Generate column config from raw download and desired format files"
      
    recipe:
      - # Generate column configuration by comparing files directly
        step_description: "Generate column configuration for recipe sync"
        # REQ - Must be "generate_column_config" for this processor type
        processor_type: "generate_column_config"
        # REQ - File with original/raw column names
        source_file: "downloads/raw_export.xlsx"
        # REQ - File with desired column names in final order
        template_file: "templates/desired_format.xlsx"
        # REQ - Output file path for generated YAML configuration
        output_file: "configs/column_config.yaml"

excel_sheet_selection_example:
  description: "Generate config from specific Excel sheets"
  yaml: |
    settings:
      description: "Generate column config with specific sheet selection"
      variables:
        config_date: "{YYYY-MM-DD}"
        raw_file: "exports/database_export_{YYYYMMDD}.xlsx"
        template_file: "templates/cash_flow_format.xlsx"
        
    recipe:
      - # Generate column configuration with sheet selection
        step_description: "Generate column config from specific Excel sheets"
        processor_type: "generate_column_config"
        # REQ - Source Excel file path
        source_file: "{str:raw_file}"
        # REQ - Template Excel file path  
        template_file: "{str:template_file}"
        # OPT - Specific sheet in source file (name or 1-based number)
        source_sheet: "Database Export"
        # OPT - Specific sheet in template file (name or 1-based number)
        template_sheet: 2
        # REQ - Output configuration file
        output_file: "configs/cash_flow_column_config_{str:config_date}.yaml"
        # OPT - Include ready-to-use recipe section
        include_recipe_section: true

advanced_configuration_example:
  description: "Advanced configuration with custom similarity threshold"
  yaml: |
    settings:
      description: "Generate column config with custom analysis settings"
      
    recipe:
      - # Advanced column configuration generation
        step_description: "Generate column config with custom similarity matching"
        processor_type: "generate_column_config"
        source_file: "data/legacy_system_export.csv"
        template_file: "templates/business_format.xlsx"
        template_sheet: "Column Template"
        output_file: "configs/legacy_to_business_mapping.yaml"
        # OPT - Lower threshold to catch more potential renames
        # Values: 0.0 (match anything) to 1.0 (exact match only)
        # Default value: 0.8
        similarity_threshold: 0.5
        # OPT - Which row contains headers (1-based for Excel)
        # Default value: 1
        header_row: 3
        # OPT - Number of sample rows to analyze for empty columns
        # Default value: 5 (keep low for performance)
        sample_rows: 10
        # OPT - Whether to check for empty columns in data
        # Default value: true
        check_column_data: true
        # OPT - Include recipe for immediate use
        include_recipe_section: true

mixed_file_formats_example:
  description: "Compare CSV source with Excel template"
  yaml: |
    settings:
      description: "Generate config comparing different file formats"
      
    recipe:
      - # Mixed file format comparison
        step_description: "Compare CSV export with Excel template"
        processor_type: "generate_column_config"
        # Source can be CSV, Excel, etc.
        source_file: "downloads/daily_export.csv"
        # Template can be different format
        template_file: "templates/report_format.xlsx"
        template_sheet: "Report Layout"
        output_file: "configs/daily_export_mapping.yaml"
        # CSV files ignore sheet parameters (no error)
        source_sheet: null  # Explicitly null for clarity
        include_recipe_section: false  # Just generate variables

parameter_details:
  processor_type:
    type: string
    required: true
    description: "Must be 'generate_column_config' for this processor type"
    examples:
      - "generate_column_config"

  step_description:
    type: string
    required: false
    default: "Unnamed generate_column_config step"
    description: "Human-readable description of what this configuration generation does"
    examples:
      - "Generate column config for recipe sync"
      - "Update column mappings from latest template"
      - "Detect column changes in manual report"

  source_file:
    type: string
    required: true
    description: "Path to file containing original/raw column names"
    examples:
      - "downloads/raw_export.xlsx"
      - "data/database_export.csv"
      - "imports/legacy_data.xls"
    variable_support: "Supports built-in date/time variables and custom recipe variables"
    supported_formats: "Excel (.xlsx, .xls, .xlsm, .xlsb), CSV (.csv), TSV (.tsv)"

  template_file:
    type: string
    required: true
    description: "Path to file containing desired column names in final order"
    examples:
      - "templates/desired_format.xlsx"
      - "templates/business_layout.csv"
      - "formats/standard_report.xlsx"
    variable_support: "Supports built-in date/time variables and custom recipe variables"
    supported_formats: "Excel (.xlsx, .xls, .xlsm, .xlsb), CSV (.csv), TSV (.tsv)"

  output_file:
    type: string
    required: true
    description: "Path where the generated YAML configuration file will be written"
    examples:
      - "configs/column_config.yaml"
      - "output/column_mapping_{date}.yaml"
      - "templates/generated_config.yaml"
    variable_support: "Supports built-in date/time variables and custom recipe variables"

  source_sheet:
    type: string_or_integer
    required: false
    default: null
    description: "Specific sheet in source Excel file (ignored for CSV files)"
    examples:
      - "Data Export"        # Sheet name
      - 2                    # Sheet number (1-based)
      - "Sheet1"             # Default sheet name
    notes: 
      - "If null/omitted, uses first sheet"
      - "Ignored for CSV files (no error raised)"
      - "Sheet numbers are 1-based (Excel convention)"

  template_sheet:
    type: string_or_integer
    required: false
    default: null
    description: "Specific sheet in template Excel file (ignored for CSV files)"
    examples:
      - "Column Template"    # Sheet name
      - 1                    # First sheet
      - "Report Format"      # Named template sheet
    notes:
      - "If null/omitted, uses first sheet"
      - "Ignored for CSV files (no error raised)"
      - "Sheet numbers are 1-based (Excel convention)"

  header_row:
    type: integer
    required: false
    default: 1
    description: "Row number containing column headers (1-based for Excel)"
    examples:
      - 1    # Headers in first row
      - 3    # Headers in third row (skip title/metadata rows)
      - 2    # Headers in second row
    notes: "Use 1-based numbering to match Excel row numbers"

  sample_rows:
    type: integer
    required: false
    default: 5
    description: "Number of data rows to sample for empty column detection"
    examples:
      - 5     # Default - good balance of speed and accuracy
      - 10    # More thorough analysis
      - 25    # Maximum recommended for large files
    performance_warning: "Values >25 may significantly slow processing on large files"

  check_column_data:
    type: boolean
    required: false
    default: true
    description: "Whether to analyze data rows to detect truly empty columns"
    examples:
      - true   # Analyze data to find empty columns (recommended)
      - false  # Only use header row analysis (faster)
    use_case: "Set false for header-only analysis or very large files"

  similarity_threshold:
    type: float
    required: false
    default: 0.8
    description: "Minimum similarity score for automatic column name matching"
    examples:
      - 0.8    # Default - good balance
      - 0.5    # More lenient matching (catches more renames)
      - 1.0    # Exact matches only
      - 0.0    # Match everything (not recommended)
    range: "0.0 (match anything) to 1.0 (exact match only)"

  include_recipe_section:
    type: boolean
    required: false
    default: false
    description: "Whether to include a complete recipe section with import/rename/select steps"
    examples:
      - true   # Include ready-to-use recipe section
      - false  # Only generate variable lists
    use_case: "Set true to generate complete recipes for immediate use"

# End of file #
