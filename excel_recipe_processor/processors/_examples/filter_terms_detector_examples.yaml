# Filter Terms Detector Examples
# Revision date: 2025-08-06

description: "Detect potential filter terms by comparing raw vs filtered datasets using n-gram analysis"

basic_example:
  description: "Simple analysis of text columns to identify filter terms"
  yaml: |
    settings:
      description: "Detect filter terms used in manual data processing"
      stages:
        - stage_name: "stg_raw_data_imported_from_database"
          description: "Original unfiltered data from database export"
          protected: false
        - stage_name: "stg_filtered_data_manual_processing_complete"
          description: "Manually filtered final dataset"
          protected: false
        - stage_name: "stg_filter_terms_analysis_candidates_ranked"
          description: "Detected filter terms ranked by confidence"
          protected: false
    
    recipe:
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_terms_detector step"
        step_description: "Analyze manual filtering to identify reusable filter terms"
        # REQ - Must be "filter_terms_detector" for this processor type
        processor_type: "filter_terms_detector"
        # REQ - Stage containing original unfiltered data
        raw_stage: "stg_raw_data_imported_from_database"
        # REQ - Stage containing manually filtered final data
        filtered_stage: "stg_filtered_data_manual_processing_complete"
        # REQ - Text columns to analyze for filter patterns
        text_columns: ["notes", "description", "comments"]
        # REQ - Output stage for filter term candidates
        save_to_stage: "stg_filter_terms_analysis_candidates_ranked"

advanced_example:
  description: "Comprehensive analysis with categorical and text columns, custom parameters"
  yaml: |
    settings:
      description: "Advanced filter terms detection with custom parameters and multiple column types"
      stages:
        - stage_name: "stg_raw_sales_data_complete_export"
          description: "Complete raw sales data export"
          protected: false
        - stage_name: "stg_filtered_sales_data_final_report_ready"
          description: "Sales data after manual filtering for quarterly report"
          protected: false
        - stage_name: "stg_sales_filter_terms_comprehensive_analysis"
          description: "Comprehensive filter terms analysis for sales data"
          protected: false
    
    recipe:
      - step_description: "Comprehensive filter terms detection for sales report automation"
        processor_type: "filter_terms_detector"
        raw_stage: "stg_raw_sales_data_complete_export"
        filtered_stage: "stg_filtered_sales_data_final_report_ready"
        # REQ - Text columns for n-gram analysis
        text_columns: ["sales_notes", "customer_feedback", "deal_description"]
        # OPT - Categorical columns for simple value comparison
        # Default value: [] (no categorical analysis)
        categorical_columns: ["deal_status", "priority_level", "sales_stage"]
        # OPT - N-gram range for text analysis
        # Default value: (1, 4) (1-4 word phrases)
        ngram_range: [1, 5]
        # OPT - Minimum frequency for term consideration
        # Default value: 2 (must appear at least twice)
        min_frequency: 3
        # OPT - Maximum number of n-grams to analyze
        # Default value: 10000
        max_features: 15000
        # OPT - Minimum score threshold for inclusion in results
        # Default value: 0.1
        score_threshold: 0.2
        # OPT - Additional stop words to ignore
        # Default value: [] (only standard English stop words)
        custom_stop_words: ["corp", "inc", "ltd", "llc", "company"]

text_only_example:
  description: "Focus only on text column analysis for notes fields"
  yaml: |
    settings:
      description: "Analyze only text fields to find filtering patterns in notes"
      stages:
        - stage_name: "stg_raw_project_data_with_extensive_notes"
          description: "Raw project data with detailed notes fields"
          protected: false
        - stage_name: "stg_filtered_project_data_notes_cleaned"
          description: "Project data after manual note-based filtering"
          protected: false
        - stage_name: "stg_project_filter_terms_text_analysis_only"
          description: "Filter terms detected from text analysis only"
          protected: false
    
    recipe:
      - step_description: "Detect filter terms from project notes fields only"
        processor_type: "filter_terms_detector"
        raw_stage: "stg_raw_project_data_with_extensive_notes"
        filtered_stage: "stg_filtered_project_data_notes_cleaned"
        text_columns: ["project_notes", "status_comments", "risk_assessment"]
        # No categorical_columns specified - text analysis only
        ngram_range: [1, 3]  # Shorter phrases for project notes
        min_frequency: 2
        score_threshold: 0.15

categorical_only_example:
  description: "Focus only on categorical columns for simple filter detection"
  yaml: |
    settings:
      description: "Analyze categorical fields to identify filtered values"
      stages:
        - stage_name: "stg_raw_customer_data_all_statuses"
          description: "Complete customer data with all status values"
          protected: false
        - stage_name: "stg_filtered_customer_data_active_customers_only"
          description: "Customer data filtered to active customers"
          protected: false
        - stage_name: "stg_customer_filter_terms_categorical_analysis"
          description: "Categorical filter terms detected"
          protected: false
    
    recipe:
      - step_description: "Identify categorical filters applied to customer data"
        processor_type: "filter_terms_detector"
        raw_stage: "stg_raw_customer_data_all_statuses"
        filtered_stage: "stg_filtered_customer_data_active_customers_only"
        # Empty text_columns since we're only doing categorical analysis
        text_columns: []
        categorical_columns: ["customer_status", "account_type", "region", "priority"]
        # Categorical analysis doesn't use n-gram parameters
        score_threshold: 0.0  # Include all categorical differences

parameter_details:
  raw_stage:
    type: string
    required: true
    description: "Stage containing the original unfiltered dataset"
    
  filtered_stage:
    type: string
    required: true
    description: "Stage containing the manually filtered final dataset"
    
  text_columns:
    type: list
    required: true
    description: "List of text column names to analyze for filter terms using n-gram analysis"
    
  categorical_columns:
    type: list
    required: false
    default: []
    description: "List of categorical column names to analyze for removed values"
    
  ngram_range:
    type: list
    required: false
    default: [1, 4]
    description: "Range of n-gram sizes to analyze [min_n, max_n], e.g. [1,4] analyzes 1-4 word phrases (converted to tuple internally)"
    
  min_frequency:
    type: integer
    required: false
    default: 2
    description: "Minimum frequency required for a term to be considered (reduces noise)"
    
  max_features:
    type: integer
    required: false
    default: 10000
    description: "Maximum number of n-grams to analyze (performance tuning)"
    
  score_threshold:
    type: float
    required: false
    default: 0.1
    description: "Minimum confidence score for inclusion in results (0.0-1.0, converted to 0-100% in output)"
    
  custom_stop_words:
    type: list
    required: false
    default: []
    description: "Additional words to ignore beyond standard English stop words"

output_columns:
  Column_Name:
    description: "Name of the column where the filter term was detected"
    
  Filter_Term:
    description: "The detected filter term (word or phrase)"
    
  Term_Type:
    description: "Type of analysis: 'categorical_value' or 'text_ngram'"
    
  Ngram_Length:
    description: "Number of words in the term (1 = single word, 2+ = phrase)"
    
  Raw_Frequency:
    description: "How often this term appeared in the raw dataset"
    
  Filtered_Frequency:
    description: "How often this term appears in the filtered dataset"
    
  Disappearance_Ratio:
    description: "Ratio of term removal (1.0 = completely removed, 0.0 = unchanged)"
    
  Confidence_Percentage:
    description: "Overall confidence that this term was used as a filter (0-100%, higher = more likely)"
    
  Analysis_Method:
    description: "Analysis method used: 'categorical_comparison' or 'ngram_analysis'"
