# Revision date: 2025-08-07

description: "Clean and standardize messy data with find/replace, case conversion, whitespace cleanup, and conditional business logic using columns lists"

basic_example:
  description: "Simple data cleaning with whitespace and case fixes using new columns list syntax"
  yaml: |
    # Clean common data quality issues
    
    settings:
      description: "Clean customer data formatting issues"
      stages:
        - stage_name: "raw_customer_data"
          description: "Raw customer data from import"
          protected: false
        - stage_name: "cleaned_customers"
          description: "Standardized customer data"
          protected: false
    
    recipe:
      # Previous steps populate raw_customer_data
      - step_description: "Clean customer data formatting"
        # REQ - Must be "clean_data" for this processor type
        processor_type: "clean_data"
        # REQ - Stage to read data from
        source_stage: "raw_customer_data"
        # REQ - Stage to save cleaned results
        save_to_stage: "cleaned_customers"
        # REQ - List of cleaning rules to apply in sequence
        rules:
          # First rule: remove extra whitespace
          - # REQ - List of column names to clean
            columns: ["Customer_Name"]
            # REQ - Action type to perform
            # Valid actions: "strip_whitespace", "normalize_whitespace", "remove_invisible_chars"
            action: "strip_whitespace"
          
          # Second rule: standardize case
          - # REQ - List of column names to clean
            columns: ["Customer_Name"]
            # REQ - Case conversion action
            # Valid case actions: "uppercase", "lowercase", "title_case"
            action: "title_case"

multiple_columns_example:
  description: "Apply same cleaning rule to multiple columns simultaneously"
  yaml: |
    # Clean multiple columns with the same rule - major usability improvement
    
    settings:
      description: "Clean multiple date and numeric columns efficiently"
      stages:
        - stage_name: "raw_data"
          description: "Raw data with formatting issues"
          protected: false
        - stage_name: "cleaned_data"
          description: "Data with standardized formatting"
          protected: false
    
    recipe:
      - step_description: "Clean multiple columns efficiently"
        processor_type: "clean_data"
        source_stage: "raw_data"
        save_to_stage: "cleaned_data"
        rules:
          # Clean multiple date columns at once
          - # REQ - List of date columns to standardize
            columns: ["Invoice_Date", "Ship_Date", "ETD", "ETA_Destination", "Paid_Date"]
            # REQ - Standardize date formats
            action: "fix_dates"
            # OPT - Expected date format pattern
            # Default value: auto-detect common formats
            format: "%Y-%m-%d"
          
          # Clean multiple numeric columns at once
          - # REQ - List of numeric columns to format
            columns: ["Packages", "Cases", "Units", "Net_Weight", "Gross_Weight"]
            # REQ - Clean and convert numeric data
            action: "fix_numeric"
            # OPT - Decimal places for formatting
            decimal_places: 0
            # OPT - Use thousands separator
            thousands_separator: true
          
          # Remove invisible characters from multiple text columns
          - # REQ - List of text columns to clean
            columns: ["Product_Origin", "Species", "Component", "Customer"]
            # REQ - Remove invisible Unicode characters
            action: "normalize_whitespace"

advanced_example:
  description: "Complex cleaning with conditional business rules and multiple data types"
  yaml: |
    # Advanced data cleaning with conditional logic and data type fixes
    
    settings:
      description: "Comprehensive data cleaning and standardization"
      stages:
        - stage_name: "sql_export_data"
          description: "Raw data from SQL export"
          protected: false
        - stage_name: "cleaned_data"
          description: "Fully cleaned and standardized data"
          protected: false
    
    recipe:
      - step_description: "Comprehensive data cleaning and standardization"
        processor_type: "clean_data"
        source_stage: "sql_export_data"
        save_to_stage: "cleaned_data"
        # REQ - List of cleaning rules (processed in order)
        rules:
          # Rule 1: Fix invisible characters from SQL exports
          - # REQ - List of columns to clean
            columns: ["Product_Origin"]
            # REQ - Remove invisible Unicode characters that break filtering
            # Fixes: zero-width spaces, non-breaking spaces, BOM characters
            action: "normalize_whitespace"
          
          # Rule 2: Conditional replacement based on business logic
          - # REQ - Column to modify (must be a list)
            columns: ["Component"]
            # REQ - Find and replace action
            action: "replace"
            # REQ - Value to find and replace
            old_value: "FLESH"
            # REQ - Replacement value
            new_value: "CANS"
            # OPT - Column to check for condition
            condition_column: "Product_Name"
            # OPT - Type of condition to evaluate
            # Valid conditions: "equals", "not_equals", "contains", "not_contains", 
            # "greater_than", "less_than"
            condition: "contains"
            # OPT - Value to test condition against
            condition_value: "CANNED"
            # OPT - Case sensitivity for text operations
            # Default value: true
            case_sensitive: false
          
          # Rule 3: Standardize case for consistency
          - columns: ["Status"]
            # REQ - Convert all text to uppercase
            action: "uppercase"
          
          # Rule 4: Fix numeric data formatting
          - columns: ["Price"]
            # REQ - Clean and convert numeric data
            # Removes: $, commas, spaces, converts to float
            # Handles: "$1,234.56" → 1234.56
            action: "fix_numeric"
            # OPT - Value for non-numeric entries
            # Default value: NaN
            fill_na: 0.0

value_standardization_example:
  description: "Map inconsistent values to standard terms"
  yaml: |
    # Standardize inconsistent values using mapping tables
    
    settings:
      description: "Standardize status and category values"
      stages:
        - stage_name: "inconsistent_data"
          description: "Data with inconsistent value formats"
          protected: false
        - stage_name: "standardized_data"
          description: "Data with standardized values"
          protected: false
    
    recipe:
      - step_description: "Standardize status and category values"
        processor_type: "clean_data"
        source_stage: "inconsistent_data"
        save_to_stage: "standardized_data"
        rules:
          # Map multiple variations to standard values
          - # REQ - List of columns to standardize
            columns: ["Status"]
            # REQ - Value mapping action
            action: "standardize_values"
            # REQ - Mapping dictionary from old values to new values
            # All variations of input will be mapped to the standard output
            mapping:
              "ACTIVE": "Active"
              "active": "Active"
              "Act": "Active"
              "INACTIVE": "Inactive"
              "inactive": "Inactive"
              "Inc": "Inactive"
              "PENDING": "Pending"
              "pending": "Pending"
              "Pend": "Pending"

sql_export_cleanup_example:
  description: "Fix common SQL export issues that break filtering operations"
  yaml: |
    # Clean SQL export data that has invisible characters
    
    settings:
      description: "Fix SQL export formatting issues"
      stages:
        - stage_name: "sql_raw_data"
          description: "Data directly from SQL export"
          protected: false
        - stage_name: "filtering_ready_data"
          description: "Data ready for reliable filtering"
          protected: false
    
    recipe:
      - step_description: "Clean SQL export data for reliable filtering"
        processor_type: "clean_data"
        source_stage: "sql_raw_data"
        save_to_stage: "filtering_ready_data"
        rules:
          # Critical: Fix invisible characters that break exact matching
          - columns: ["Product_Origin", "Major_Species", "Component"]
            # REQ - Remove all invisible Unicode characters
            # Essential for SQL exports that contain zero-width spaces
            action: "normalize_whitespace"
          
          # Standardize case for consistent filtering
          - columns: ["Status"]
            action: "uppercase"

data_type_cleaning_example:
  description: "Fix data types and formatting issues"
  yaml: |
    # Clean and convert data types for proper processing
    
    settings:
      description: "Fix data types and formatting for analysis"
      stages:
        - stage_name: "mixed_format_data"
          description: "Data with various formatting issues"
          protected: false
        - stage_name: "typed_data"
          description: "Data with correct types and formatting"
          protected: false
    
    recipe:
      - step_description: "Fix data types and formatting"
        processor_type: "clean_data"
        source_stage: "mixed_format_data"
        save_to_stage: "typed_data"
        rules:
          # Fix numeric columns with formatting
          - # REQ - List of columns with numeric data
            columns: ["Price"]
            # REQ - Clean and convert numeric data
            # Removes: $, commas, spaces, converts to float
            # Handles: "$1,234.56" → 1234.56
            action: "fix_numeric"
            # OPT - Value for non-numeric entries
            # Default value: NaN
            fill_na: 0.0
          
          # Fix date formatting
          - # REQ - List of columns with date data
            columns: ["Order_Date"]
            # REQ - Parse and standardize date formats
            action: "fix_dates"
            # OPT - Expected date format pattern
            # Default value: auto-detect common formats
            # Format examples: "%Y-%m-%d", "%m/%d/%Y", "%d-%b-%Y"
            format: "%Y-%m-%d"
          
          # Fill empty/null values
          - # REQ - List of columns to fill
            columns: ["Customer_Category"]
            # REQ - Fill empty cells with value
            action: "fill_empty"
            # REQ - Value to use for empty cells
            fill_value: "Standard"

multiple_rules_example:
  description: "Apply multiple cleaning operations in sequence"
  yaml: |
    # Complex cleaning workflow with multiple sequential operations
    
    settings:
      description: "Multi-step data cleaning workflow"
      stages:
        - stage_name: "messy_data"
          description: "Raw data with multiple quality issues"
          protected: false
        - stage_name: "production_ready_data"
          description: "Fully cleaned production-ready data"
          protected: false
    
    recipe:
      - step_description: "Complete data cleaning workflow"
        processor_type: "clean_data"
        source_stage: "messy_data"
        save_to_stage: "production_ready_data"
        rules:
          # Step 1: Remove invisible characters
          - columns: ["Product_Name"]
            action: "remove_invisible_chars"
          
          # Step 2: Normalize whitespace
          - columns: ["Product_Name"]
            action: "strip_whitespace"
          
          # Step 3: Standardize case
          - columns: ["Product_Name"]
            action: "title_case"
          
          # Step 4: Clean phone numbers
          - columns: ["Phone"]
            action: "regex_replace"
            # REQ - Regular expression pattern to match
            pattern: "[^0-9]"
            # REQ - Replacement text
            replacement: ""
          
          # Step 5: Fix pricing data
          - columns: ["Price"]
            action: "fix_numeric"
            fill_na: 0.0
          
          # Step 6: Conditional business rule
          - columns: ["Priority"]
            action: "replace"
            old_value: "Standard"
            new_value: "High"
            condition_column: "Order_Value"
            condition: "greater_than"
            condition_value: 1000

parameter_details:
  rules:
    type: list
    required: true
    description: "List of cleaning operations to apply in sequence"
    structure: "Each rule must contain 'columns' and 'action', plus action-specific parameters"
  
  columns:
    type: list
    required: true
    context: "Within each rule"
    description: "List of column names to clean - must exist in source data. Can contain single column."
    examples: [
      ["Customer_Name"],
      ["Product_Origin", "Species"],
      ["Invoice_Date", "Ship_Date", "ETD"]
      ]
  
  action:
    type: string
    required: true
    context: "Within each rule"
    description: "Type of cleaning operation to perform"
    valid_actions: [
      "strip_whitespace", "normalize_whitespace", "remove_invisible_chars", 
      "uppercase", "lowercase", "title_case", "replace", "regex_replace", 
      "fix_numeric", "fix_dates", "fill_empty", "standardize_values", 
      "remove_special_chars", "remove_duplicates"
      ]

# End of file #
