# Revision date: 2025-07-30

description: "Extract portions of DataFrames using 1-based indexing. Perfect for separating metadata, headers, and data sections in complex Excel files."

basic_example:
  description: "Extract specific rows from a DataFrame"
  yaml: |
    settings:
      description: "Import Excel file and extract metadata rows"
      stages:
        - stage_name: "raw_data"
          description: "Complete imported Excel file"
          protected: false
        - stage_name: "file_metadata"
          description: "Header information from Excel file"
          protected: false

    recipe:
      - # OPT - Human-readable step description
        step_description: "Import Excel file"
        # REQ - Must be "import_file" for file import
        processor_type: "import_file"
        # REQ - Path to input Excel file
        input_file: "data/monthly_report.xlsx"
        # REQ - Stage to save imported data (import_file only needs save_to_stage)
        save_to_stage: "raw_data"

      - # OPT - Human-readable step description
        # Default value: "Unnamed slice_data step"
        step_description: "Extract file metadata section"
        # REQ - Must be "slice_data" for this processor type
        processor_type: "slice_data"
        # REQ - Stage to read data from (must be declared in settings.stages)
        source_stage: "raw_data"
        # REQ - Type of slice operation to perform
        # Valid values: "row_range", "column_range"
        slice_type: "row_range"
        # REQ - Starting row number (1-based indexing, matches Excel)
        # Row 1 is the first row in the data
        start_row: 1
        # OPT - Ending row number (1-based, inclusive)
        # If omitted, extracts from start_row to end of data
        end_row: 3
        # REQ - Stage to save extracted rows
        save_to_stage: "file_metadata"

data_extraction_example:
  description: "Extract data section with automatic header promotion"
  yaml: |
    settings:
      description: "Import file and extract clean data with proper column headers"
      stages:
        - stage_name: "imported_file"
          description: "Complete imported Excel file"
          protected: false
        - stage_name: "clean_data"
          description: "Data section with promoted headers"
          protected: false

    recipe:
      - # OPT - Human-readable step description
        step_description: "Import Excel file with mixed content"
        # REQ - Must be "import_file" for file import
        processor_type: "import_file"
        # REQ - Path to input Excel file
        input_file: "data/sales_report.xlsx"
        # REQ - Stage to save imported data (import_file only needs save_to_stage)
        save_to_stage: "imported_file"

      - # OPT - Human-readable step description
        step_description: "Extract data with header promotion"
        # REQ - Must be "slice_data" for this processor type
        processor_type: "slice_data"
        # REQ - Stage to read data from (must be declared in settings.stages)
        source_stage: "imported_file"
        # REQ - Type of slice operation
        slice_type: "row_range"
        # REQ - Row where data section starts (1-based)
        # This should be the row containing column headers
        start_row: 4
        # OPT - Ending row (1-based, inclusive)
        # Omit to get all remaining rows from start_row
        end_row: 10
        # OPT - Promote first row of slice to column headers
        # Default value: false
        # When true, first row becomes DataFrame column names
        slice_result_contains_headers: true
        # REQ - Stage to save the clean data
        save_to_stage: "clean_data"

column_slicing_example:
  description: "Extract specific columns using different reference methods"
  yaml: |
    settings:
      description: "Import wide dataset and extract key columns"
      stages:
        - stage_name: "wide_dataset"
          description: "Complete imported dataset with many columns"
          protected: false
        - stage_name: "key_columns"
          description: "Important columns only"
          protected: false
        - stage_name: "first_three_columns"
          description: "First three columns by number"
          protected: false

    recipe:
      - # OPT - Human-readable step description
        step_description: "Import wide Excel dataset"
        # REQ - Must be "import_file" for file import
        processor_type: "import_file"
        # REQ - Path to input Excel file
        input_file: "data/wide_dataset.xlsx"
        # REQ - Stage to save imported data (import_file only needs save_to_stage)
        save_to_stage: "wide_dataset"

      - # OPT - Human-readable step description
        step_description: "Extract key columns using Excel references"
        # REQ - Must be "slice_data" for this processor type
        processor_type: "slice_data"
        # REQ - Stage to read data from (must be declared in settings.stages)
        source_stage: "wide_dataset"
        # REQ - Type of slice operation
        slice_type: "column_range"
        # REQ - Starting column reference (Excel letter format)
        # Valid formats: "A", "B", "C", etc.
        start_col: "A"
        # OPT - Ending column reference (Excel letter format)
        # If omitted, extracts from start_col to last column
        end_col: "D"
        # REQ - Stage to save column subset
        save_to_stage: "key_columns"

      - # Alternative example using 1-based column numbers
        step_description: "Extract first 3 columns by number"
        processor_type: "slice_data"
        # REQ - Stage to read data from (must be declared in settings.stages)
        source_stage: "wide_dataset"
        slice_type: "column_range"
        # REQ - Starting column number (1-based indexing)
        # Column 1 is the first column (Excel column A)
        start_col: 1
        # OPT - Ending column number (1-based, inclusive)
        end_col: 3
        # REQ - Stage to save column subset
        save_to_stage: "first_three_columns"

stage_workflow_example:
  description: "Process data from saved stage instead of pipeline input"
  yaml: |
    settings:
      description: "Multi-step workflow using stage-based processing"
      stages:
        - stage_name: "raw_excel_data"
          description: "Complete imported Excel file"
          protected: false
        - stage_name: "extracted_metadata"
          description: "File metadata section"
          protected: false
        - stage_name: "clean_dataset"
          description: "Data section with headers"
          protected: false

    recipe:
      - # Step 1: Import the entire Excel file
        step_description: "Import complete Excel file"
        processor_type: "import_file"
        # REQ - Path to input file
        input_file: "reports/monthly_data.xlsx"
        # REQ - Stage to save imported data
        save_to_stage: "raw_excel_data"

      - # Step 2: Extract metadata from saved stage
        step_description: "Extract file metadata from saved data"
        processor_type: "slice_data"
        slice_type: "row_range"
        # REQ - Load data from this stage instead of pipeline input
        # Stage must exist and contain data
        source_stage: "raw_excel_data"
        start_row: 1
        end_row: 2
        save_to_stage: "extracted_metadata"

      - # Step 3: Extract data section from same saved stage
        step_description: "Extract data with headers from saved data"
        processor_type: "slice_data"
        slice_type: "row_range"
        source_stage: "raw_excel_data"
        start_row: 4
        slice_result_contains_headers: true
        save_to_stage: "clean_dataset"

advanced_example:
  description: "Complex workflow with column name references and validation"
  yaml: |
    settings:
      description: "Advanced slicing with column name references and data validation"
      variables:
        report_date: "2024-03"
        department: "sales"
      stages:
        - stage_name: "imported_report"
          description: "Raw monthly sales report"
          protected: false
        - stage_name: "core_data"
          description: "Essential columns for analysis"
          protected: false
        - stage_name: "validation_data"
          description: "Data subset for quality checks"
          protected: false

    recipe:
      - # Import with variable substitution
        step_description: "Import monthly sales report"
        processor_type: "import_file"
        # REQ - Input file path with variable support
        # Variables: {report_date}, {department} defined in settings
        input_file: "reports/{department}_{report_date}.xlsx"
        save_to_stage: "imported_report"

      - # Extract core columns by name reference
        step_description: "Extract essential columns by name"
        processor_type: "slice_data"
        slice_type: "column_range"
        source_stage: "imported_report"
        # REQ - Starting column name (exact match required)
        # Must match existing column header exactly
        start_col: "Product ID"
        # OPT - Ending column name (exact match required)
        end_col: "Total Sales"
        save_to_stage: "core_data"

      - # Extract validation subset
        step_description: "Extract data for quality validation"
        processor_type: "slice_data"
        slice_type: "row_range"
        source_stage: "core_data"
        start_row: 1
        # OPT - Limit to first 100 rows for validation
        end_row: 100
        slice_result_contains_headers: true
        save_to_stage: "validation_data"

parameter_details:
  processor_type:
    type: string
    required: true
    description: "Must be 'slice_data' for this processor type"
    examples:
      - "slice_data"

  step_description:
    type: string
    required: false
    default: "Unnamed slice_data step"
    description: "Human-readable description of what this step does"
    examples:
      - "Extract file metadata"
      - "Get data section with headers"

  slice_type:
    type: string
    required: true
    description: "Type of slicing operation to perform"
    examples:
      - "row_range"
      - "column_range"

  start_row:
    type: integer
    required: true
    description: "Starting row number using 1-based indexing (row 1 = first row)"
    examples:
      - 1
      - 4
      - 10
    note: "Only used with slice_type: row_range"

  end_row:
    type: integer
    required: false
    default: null
    description: "Ending row number (1-based, inclusive). If omitted, extracts to end of data"
    examples:
      - 3
      - 50
      - 100
    note: "Only used with slice_type: row_range"

  start_col:
    type: string or integer
    required: true
    description: "Starting column reference. Supports Excel letters (A, B), 1-based numbers (1, 2), or exact column names"
    examples:
      - "A"
      - 1
      - "Product ID"
    note: "Only used with slice_type: column_range"

  end_col:
    type: string or integer
    required: false
    default: null
    description: "Ending column reference. Same format as start_col. If omitted, extracts to last column"
    examples:
      - "F"
      - 6
      - "Total Price"
    note: "Only used with slice_type: column_range"

  slice_result_contains_headers:
    type: boolean
    required: false
    default: false
    description: "When true, promotes first row of slice result to DataFrame column headers"
    examples:
      - true
      - false
    note: "Useful when extracting data sections where first row contains column names"

  source_stage:
    type: string
    required: false
    default: null
    description: "Load data from this saved stage instead of pipeline input. Stage must exist and contain data"
    examples:
      - "raw_data"
      - "imported_file"
      - "previous_results"

  save_to_stage:
    type: string
    required: false
    default: null
    description: "Save slice results to this stage name for later use in pipeline"
    examples:
      - "metadata"
      - "clean_data"
      - "key_columns"
