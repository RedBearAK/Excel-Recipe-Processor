# Revision date: 2025-07-30

description: "Filter DataFrame rows using various conditions with stage-based data flow"

basic_example:
  description: "Simple equals filter with stage-based processing"
  yaml: |
    # Complete recipe with filter processor
    
    settings:
      description: "Filter for active customers using basic equality condition"
      stages:
        - stage_name: "raw_data"
          description: "Raw imported data"
          protected: false
        - stage_name: "active_customers"
          description: "Filtered active customers only"
          protected: false
    
    recipe:
      # Previous step would populate raw_data stage
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Filter for active customers only"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from (must be declared in settings.stages)
        source_stage: "raw_data"
        # REQ - Stage to save filtered results (must be declared in settings.stages)
        save_to_stage: "active_customers"
        # REQ - List of filter conditions (AND logic applied)
        filters:
          - # REQ - Column name to filter on
            column: "Status"
            # REQ - Filter condition type
            condition: "equals"
            # REQ - Value to compare against
            value: "Active"

multiple_filters_example:
  description: "Multiple filter conditions with different operators"
  yaml: |
    # Apply multiple filters in sequence (AND logic)
    
    settings:
      description: "Apply multiple filter conditions to extract premium recent orders"
      stages:
        - stage_name: "all_orders"
          description: "All order data"
          protected: false
        - stage_name: "premium_orders"
          description: "High-value recent orders"
          protected: false
    
    recipe:
      # Previous step populates all_orders
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Filter for premium recent orders"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from
        source_stage: "all_orders"
        # REQ - Stage to save filtered results
        save_to_stage: "premium_orders"
        # REQ - List of filter conditions (all must be true - AND logic)
        filters:
          # Filter 1: Amount greater than $1000
          - # REQ - Column name to filter on
            column: "Order_Amount"
            # REQ - Numeric comparison condition
            condition: "greater_than"
            # REQ - Numeric value for comparison
            value: 1000
          # Filter 2: Customer tier is Premium or VIP
          - # REQ - Column name to filter on
            column: "Customer_Tier"
            # REQ - List membership condition
            condition: "in_list"
            # REQ - List of acceptable values
            value: ["Premium", "VIP"]
          # Filter 3: Recent orders only
          - # REQ - Column name to filter on
            column: "Order_Date"
            # REQ - Date comparison condition
            condition: "greater_than"
            # REQ - Date value in YYYY-MM-DD format
            value: "2024-01-01"

text_filtering_example:
  description: "Text-based filtering with contains and pattern matching"
  yaml: |
    # Filter using text conditions
    
    settings:
      description: "Filter products using text pattern matching and exclusions"
      stages:
        - stage_name: "all_products"
          description: "Complete product catalog"
          protected: false
        - stage_name: "canned_products"
          description: "Canned products only"
          protected: false
    
    recipe:
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Filter for canned products"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from
        source_stage: "all_products"
        # REQ - Stage to save filtered results
        save_to_stage: "canned_products"
        # REQ - List of filter conditions
        filters:
          # Text contains filter
          - # REQ - Column name to filter on
            column: "Product_Name"
            # REQ - Text containment condition
            condition: "contains"
            # REQ - Text pattern to search for
            value: "CANNED"
          # Exclude test products
          - # REQ - Column name to filter on
            column: "Product_Name"
            # REQ - Text exclusion condition
            condition: "not_contains"
            # REQ - Text pattern to exclude
            value: "TEST"

numeric_filtering_example:
  description: "Numeric range and comparison filtering"
  yaml: |
    # Filter using numeric conditions
    
    settings:
      description: "Identify inventory items needing reorder using numeric thresholds"
      stages:
        - stage_name: "inventory_data"
          description: "Full inventory data"
          protected: false
        - stage_name: "reorder_needed"
          description: "Items needing reorder"
          protected: false
    
    recipe:
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Identify items needing reorder"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from
        source_stage: "inventory_data"
        # REQ - Stage to save filtered results
        save_to_stage: "reorder_needed"
        # REQ - List of filter conditions
        filters:
          # Low stock filter
          - # REQ - Column name to filter on
            column: "Quantity_On_Hand"
            # REQ - Numeric comparison condition
            condition: "less_than"
            # REQ - Numeric threshold value
            value: 50
          # Exclude discontinued items
          - # REQ - Column name to filter on
            column: "Status"
            # REQ - Exact match exclusion condition
            condition: "not_equals"
            # REQ - Value to exclude
            value: "Discontinued"
          # Only items with value
          - # REQ - Column name to filter on
            column: "Unit_Price"
            # REQ - Numeric comparison condition
            condition: "greater_than"
            # REQ - Minimum value threshold
            value: 0

variable_substitution_example:
  description: "Using recipe variables in filter values"
  yaml: |
    # Filter using variable substitution for dynamic values
    
    settings:
      description: "Demonstrate dynamic filtering using recipe variables"
      variables:
        min_amount: "500"
        target_region: "west"
      stages:
        - stage_name: "all_sales"
          description: "All sales data"
          protected: false
        - stage_name: "qualified_sales"
          description: "Sales meeting criteria"
          protected: false
    
    recipe:
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Filter using dynamic variables"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from
        source_stage: "all_sales"
        # REQ - Stage to save filtered results
        save_to_stage: "qualified_sales"
        # REQ - List of filter conditions with variable substitution
        filters:
          # Use variable in filter value
          - # REQ - Column name to filter on
            column: "Sale_Amount"
            # REQ - Numeric comparison condition
            condition: "greater_than"
            # REQ - Variable reference substituted at runtime
            value: "{min_amount}"
          # Use variable for region filtering
          - # REQ - Column name to filter on
            column: "Region"
            # REQ - Exact match condition
            condition: "equals"
            # REQ - Variable reference for dynamic region
            value: "{target_region}"

complete_workflow_example:
  description: "Complete import → filter → export workflow"
  yaml: |
    # Complete recipe with import, filter, and export
    
    settings:
      description: "Complete data processing workflow from import to export with filtering"
      variables:
        min_amount: "500"
        region: "west"
      stages:
        - stage_name: "raw_sales"
          description: "Raw sales data from import"
          protected: false
        - stage_name: "qualified_sales"
          description: "Sales meeting qualification criteria"
          protected: false
    
    recipe:
      # Step 1: Import sales data
      - # OPT - Human-readable step description
        # Default value: "Unnamed import_file step"
        step_description: "Import regional sales data"
        # REQ - Must be "import_file" for this processor type
        processor_type: "import_file"
        # REQ - Input file path with variable substitution support
        input_file: "sales/{region}_sales_data.xlsx"
        # REQ - Stage to save imported data
        save_to_stage: "raw_sales"
      
      # Step 2: Filter for qualified sales
      - # OPT - Human-readable step description
        # Default value: "Unnamed filter_data step"
        step_description: "Filter for qualified high-value sales"
        # REQ - Must be "filter_data" for this processor type
        processor_type: "filter_data"
        # REQ - Stage to read data from
        source_stage: "raw_sales"
        # REQ - Stage to save filtered results
        save_to_stage: "qualified_sales"
        # REQ - List of filter conditions
        filters:
          # Use variable in filter value
          - # REQ - Column name to filter on
            column: "Amount"
            # REQ - Numeric comparison condition
            condition: "greater_than"
            # REQ - Variable reference substituted at runtime
            value: "{min_amount}"
          # Filter for current year only
          - # REQ - Column name to filter on
            column: "Date"
            # REQ - Date comparison condition
            condition: "greater_than"
            # REQ - Date value in YYYY-MM-DD format
            value: "2024-01-01"
      
      # Step 3: Export results
      - # OPT - Human-readable step description
        # Default value: "Unnamed export_file step"
        step_description: "Export qualified sales report"
        # REQ - Must be "export_file" for this processor type
        processor_type: "export_file"
        # REQ - Stage to read data from
        source_stage: "qualified_sales"
        # REQ - Output file path with variable substitution support
        output_file: "reports/qualified_sales_{region}_{date}.xlsx"

parameter_details:
  source_stage:
    type: string
    required: true
    description: "Stage name to read data from (must be declared in settings.stages)"
    examples:
      - "raw_data"
      - "imported_customers"
      - "cleaned_products"
    note: "Stage must exist and contain data before filter step"

  save_to_stage:
    type: string
    required: true
    description: "Stage name to save filtered results (must be declared in settings.stages)"
    examples:
      - "active_customers"
      - "qualified_orders"
      - "validated_data"
    note: "Stage will be created if data filtering succeeds"

  filters:
    type: list
    required: true
    description: "List of filter conditions applied with AND logic"
    minimum_items: 1
    note: "All conditions must be true for a row to be included"

  column:
    type: string
    required: true
    context: "Within filters list items"
    description: "Name of the column to filter on - must exist in source data"
    examples: ["Status", "Amount", "Date", "Customer_Type"]
    validation: "Column name is case-sensitive and must match exactly"

  condition:
    type: string
    required: true
    context: "Within filters list items"
    description: "Type of comparison or condition to apply"
    options:
      text_conditions: ["equals", "not_equals", "contains", "not_contains", "not_empty", "is_empty"]
      numeric_conditions: ["equals", "not_equals", "greater_than", "less_than", "greater_equal", "less_equal"]
      list_conditions: ["in_list", "not_in_list"]
    examples:
      equals: "Exact text or numeric match"
      contains: "Text contains substring (case-sensitive)"
      greater_than: "Numeric or date comparison"
      in_list: "Value exists in provided list"

  value:
    type: any
    required: true
    context: "Within filters list items"
    description: "Value to compare against (supports variable substitution)"
    data_types:
      string: "For text comparisons and exact matches"
      number: "For numeric comparisons"
      list: "For in_list and not_in_list conditions"
      date: "For date comparisons (YYYY-MM-DD format)"
    variable_support: "Use {variable_name} for dynamic values from recipe settings"
    examples:
      text: ["Active", "Premium", "CANNED"]
      numeric: [100, 1000, 0]
      list: ["[\"Premium\", \"VIP\"]", "[\"Active\", \"Pending\"]"]
      date: ["2024-01-01", "2024-12-31"]
      variables: ["{min_amount}", "{target_status}", "{current_year}"]

integration_notes:
  stage_manager: "All filtered data flows through declared stages - no direct pipeline data access"
  variable_substitution: "Supports built-in date/time variables and custom variables from recipe settings"
  data_preservation: "Original source stage data remains unchanged - filter creates new stage"
  pipeline_flow: "Pure stage-based architecture - filters transform data between named stages"
  performance: "Filtering early in workflow reduces memory usage and processing time for subsequent steps"

stage_architecture_notes:
  required_stages: "Both source_stage and save_to_stage must be declared in settings.stages"
  stage_validation: "Source stage must exist and contain data before filter operation"
  data_isolation: "Filter operation does not affect source stage data - creates independent filtered stage"
  workflow_design: "Plan stage names and filter points when designing complex data processing workflows"

common_use_cases:
  data_quality: "Remove invalid, incomplete, or test records from imported data"
  business_rules: "Apply domain-specific filtering criteria (active customers, recent orders, etc.)"
  data_reduction: "Reduce dataset size early to improve performance of subsequent processing steps"
  conditional_processing: "Create different processing branches based on data characteristics"
  report_filtering: "Extract specific subsets of data for targeted reporting and analysis"
