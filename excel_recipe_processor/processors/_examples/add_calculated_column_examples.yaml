# Revision date: 2025-07-30

description: "Create new columns with calculated values using expressions, math operations, conditionals, and text manipulation"

basic_example:
  description: "Simple mathematical calculation using pandas-style expression"
  yaml: |
    # Create a total value column by multiplying price and quantity
    
    settings:
      description: "Calculate order totals from price and quantity"
      stages:
        - stage_name: "order_data"
          description: "Raw order data"
          protected: false
        - stage_name: "calculated_orders"
          description: "Orders with calculated totals"
          protected: false
    
    recipe:
      # Previous steps populate order_data stage
      - step_description: "Calculate total order value"
        # REQ - Must be "add_calculated_column" for this processor type
        processor_type: "add_calculated_column"
        # REQ - Stage to read data from
        source_stage: "order_data"
        # REQ - Stage to save results with new column
        save_to_stage: "calculated_orders"
        # REQ - Name of the new column to create
        new_column: "Total_Value"
        # OPT - Type of calculation to perform
        # Valid values: "expression", "concat", "conditional", "math", "date", "text"
        # Default value: "expression"
        calculation_type: "expression"
        # REQ - Calculation configuration dictionary
        calculation:
          # REQ - Pandas-style formula using column names
          # Column references: Use exact column names from your data
          # Valid operators: +, -, *, /, %, **, ==, !=, <, >, <=, >=
          formula: "Price * Quantity"

advanced_example:
  description: "Complex multi-type calculations showing all calculation types"
  yaml: |
    # Advanced example demonstrating various calculation types
    
    settings:
      description: "Calculate complex business metrics with profit margin"
      stages:
        - stage_name: "sales_data"
          description: "Raw sales data"
          protected: false
        - stage_name: "enriched_sales"
          description: "Sales with calculated business metrics"
          protected: false
    
    recipe:
      # Previous steps populate sales_data
      - step_description: "Calculate gross revenue with complex formula"
        processor_type: "add_calculated_column"
        source_stage: "sales_data"
        save_to_stage: "enriched_sales"
        # REQ - New column name
        new_column: "Gross_Revenue"
        # REQ - Expression calculation type
        calculation_type: "expression"
        # REQ - Complex expression calculation
        calculation:
          # REQ - Multi-column formula with arithmetic and conditional logic
          # Advanced syntax: supports pandas methods and conditional expressions
          # Multiple conditions: Use parentheses for complex logic
          formula: "Weight * 2.50 if Weight < 50 else Weight * 1.80"

conditional_example:
  description: "If-then-else logic for business categorization"
  yaml: |
    # Create customer categories based on order values
    
    settings:
      description: "Categorize customers based on order value thresholds"
      stages:
        - stage_name: "customer_orders"
          description: "Customer order data"
          protected: false
        - stage_name: "categorized_customers"
          description: "Customers with value-based categories"
          protected: false
    
    recipe:
      - step_description: "Assign customer tier based on order value"
        processor_type: "add_calculated_column"
        source_stage: "customer_orders"
        save_to_stage: "categorized_customers"
        # REQ - New column name
        new_column: "Customer_Tier"
        # REQ - Conditional calculation type
        calculation_type: "conditional"
        # REQ - Conditional logic configuration
        calculation:
          # REQ - Column to evaluate for condition
          condition_column: "Order_Value"
          # REQ - Type of condition to test
          # Valid conditions: "equals", "not_equals", "greater_than", "less_than", "greater_equal", "less_equal", "contains", "not_contains"
          condition: "greater_than"
          # REQ - Value to compare against
          condition_value: 1000
          # REQ - Value when condition is true
          value_if_true: "Premium"
          # REQ - Value when condition is false
          value_if_false: "Standard"

concatenation_example:
  description: "Combine text columns with custom separators"
  yaml: |
    # Create full names from first and last name columns
    
    settings:
      description: "Combine customer name fields into full names"
      stages:
        - stage_name: "customer_data"
          description: "Raw customer data with separate name fields"
          protected: false
        - stage_name: "formatted_customers"
          description: "Customers with formatted full names"
          protected: false
    
    recipe:
      - step_description: "Create full customer names"
        processor_type: "add_calculated_column"
        source_stage: "customer_data"
        save_to_stage: "formatted_customers"
        # REQ - New column name
        new_column: "Full_Name"
        # REQ - Concatenation calculation type
        calculation_type: "concat"
        # REQ - Concatenation configuration
        calculation:
          # REQ - List of columns to combine
          columns: ["First_Name", "Last_Name"]
          # OPT - Text separator between values
          # Default value: ""
          separator: " "

math_operations_example:
  description: "Specific mathematical operations between columns"
  yaml: |
    # Calculate profit margin from revenue and cost columns
    
    settings:
      description: "Calculate profit metrics from financial data"
      stages:
        - stage_name: "financial_data"
          description: "Revenue and cost data"
          protected: false
        - stage_name: "profit_analysis"
          description: "Financial data with profit calculations"
          protected: false
    
    recipe:
      - step_description: "Calculate profit amount"
        processor_type: "add_calculated_column"
        source_stage: "financial_data"
        save_to_stage: "profit_analysis"
        # REQ - New column name
        new_column: "Profit"
        # REQ - Math operation type
        calculation_type: "math"
        # REQ - Math operation configuration
        calculation:
          # REQ - Mathematical operation to perform
          # Valid operations: "add", "subtract", "multiply", "divide", "sum", "mean", "min", "max"
          operation: "subtract"
          # REQ - First column for binary operations
          column1: "Revenue"
          # REQ - Second column for binary operations
          column2: "Cost"

overwrite_column_example:
  description: "Replace existing column with calculated values"
  yaml: |
    # Update existing column with modified values
    
    settings:
      description: "Apply 10% price increase to existing prices"
      stages:
        - stage_name: "product_data"
          description: "Current product pricing"
          protected: false
        - stage_name: "updated_pricing"
          description: "Products with increased prices"
          protected: false
    
    recipe:
      - step_description: "Apply 10% price increase to existing prices"
        processor_type: "add_calculated_column"
        source_stage: "product_data"
        save_to_stage: "updated_pricing"
        # REQ - Existing column name to overwrite
        new_column: "Price"
        # REQ - Expression type for formula
        calculation_type: "expression"
        # REQ - Calculation to modify existing values
        calculation:
          # REQ - Formula referencing the same column being overwritten
          # Self-reference: Use the column name in its own calculation
          formula: "Price * 1.1"
        # REQ - Must be true to overwrite existing column
        # Default value: false
        overwrite: true

parameter_details:
  new_column:
    type: string
    required: true
    description: "Name of the new column to create in the DataFrame"
    examples: ["Total_Value", "Customer_Category", "Full_Name", "Profit_Margin"]
  
  calculation_type:
    type: string
    required: false
    default: "expression"
    description: "Type of calculation to perform on the data"
    valid_values: ["expression", "concat", "conditional", "math", "date", "text"]
  
  calculation:
    type: dict
    required: true
    description: "Configuration dictionary containing calculation parameters specific to the calculation_type"
    structure: "Content varies by calculation_type - see examples above"
  
  overwrite:
    type: boolean
    required: false
    default: false
    description: "Whether to overwrite an existing column with the same name as new_column"

calculation_types:
  expression:
    description: "General pandas-style calculations using column names and operators"
    required_fields: ["formula"]
    examples: ["Price * Quantity", "Revenue - Cost", "Column1 + Column2 * 0.1"]
  
  concat:
    description: "Combine text columns with optional separators"
    required_fields: ["columns"]
    optional_fields: ["separator"]
    examples: ["First_Name + Last_Name", "City, State combination"]
  
  conditional:
    description: "If-then-else logic based on column values"
    required_fields: ["condition_column", "condition", "condition_value", "value_if_true", "value_if_false"]
    examples: ["Customer tier assignment", "Status categorization"]
  
  math:
    description: "Specific mathematical operations between columns"
    required_fields: ["operation", "column1", "column2"]
    valid_operations: ["add", "subtract", "multiply", "divide", "sum", "mean", "min", "max"]
  
  date:
    description: "Date arithmetic and calculations"
    required_fields: ["operation"]
    valid_operations: ["days_between", "add_days", "subtract_days"]
  
  text:
    description: "String manipulation operations"
    required_fields: ["operation", "column"]
    valid_operations: ["length", "upper", "lower", "title"]

integration_notes:
  stage_manager: "Uses stage-based architecture for data flow - requires source_stage and save_to_stage"
  variable_substitution: "All parameters support recipe variables and built-in date/time variables"
  data_types: "Automatically handles data type conversion for most operations"
  memory_efficiency: "Creates new stage copy with added column - original stage remains unchanged"
  stage_validation: "Both source_stage and save_to_stage must be declared in settings.stages"

common_use_cases:
  financial_calculations: "Revenue totals, profit margins, tax calculations"
  customer_analytics: "Customer lifetime value, tier assignments, behavior scoring"
  data_transformation: "Unit conversions, percentage calculations, normalization"
  text_processing: "Full name creation, address formatting, description cleanup"
  business_logic: "Status assignments, category mapping, threshold-based flags"
