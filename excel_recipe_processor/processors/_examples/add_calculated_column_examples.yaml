# Revision date: 2025-08-07

description: >
  "Create new columns with calculated values using robust formula components, 
  expressions, math operations, conditionals, and text manipulation"

basic_formula_components_example:
  description: "Simple mathematical calculation using robust formula_components syntax"
  yaml: |
    # Create a total value column by multiplying price and quantity with explicit components
    
    settings:
      description: "Calculate order totals from price and quantity using formula_components"
      stages:
        - stage_name: "order_data"
          description: "Raw order data"
          protected: false
        - stage_name: "calculated_orders"
          description: "Orders with calculated totals"
          protected: false
    
    recipe:
      # Previous steps populate order_data stage
      - step_description: "Calculate total order value using formula_components"
        # REQ - Must be "add_calculated_column" for this processor type
        processor_type: "add_calculated_column"
        # REQ - Stage to read data from
        source_stage: "order_data"
        # REQ - Stage to save results with new column
        save_to_stage: "calculated_orders"
        # REQ - Name of the new column to create
        new_column: "Total_Value"
        # OPT - Type of calculation to perform
        # Default value: "expression"
        calculation_type: "expression"
        # REQ - Calculation configuration dictionary
        calculation:
          # REQ - Robust list-based formula (recommended for all column names)
          # Each element is either a column name, operator, or value
          # No quoting needed - handles spaces and special characters perfectly
          formula_components: ["Price", "*", "Quantity"]

complex_formula_components_example:
  description: "Complex calculations with grouping and multiple operations"
  yaml: |
    # Calculate profit margin percentage with proper grouping
    
    settings:
      description: "Calculate complex profit metrics using formula_components"
      stages:
        - stage_name: "financial_data"
          description: "Revenue and cost data with spaces in column names"
          protected: false
        - stage_name: "profit_analysis"
          description: "Financial data with calculated profit margins"
          protected: false
    
    recipe:
      - step_description: "Calculate profit margin percentage"
        processor_type: "add_calculated_column"
        source_stage: "financial_data"
        save_to_stage: "profit_analysis"
        new_column: "Profit_Margin_Percent"
        calculation_type: "expression"
        calculation:
          # Complex formula: ((Revenue - Cost) / Revenue) * 100
          # Nested lists create grouping (parentheses)
          formula_components: [
            [["Revenue", "-", "Total Cost"], "/", "Revenue"], "*", "100"
          ]

conditional_formula_components_example:
  description: "Conditional logic with formula_components for business rules"
  yaml: |
    # Apply different pricing based on order quantity with complex conditions
    
    settings:
      description: "Dynamic pricing based on quantity tiers"
      stages:
        - stage_name: "order_data"
          description: "Order data with quantities"
          protected: false
        - stage_name: "priced_orders"
          description: "Orders with tier-based pricing"
          protected: false
    
    recipe:
      - step_description: "Apply quantity-based pricing tiers"
        processor_type: "add_calculated_column"
        source_stage: "order_data"
        save_to_stage: "priced_orders"
        new_column: "Final_Price"
        calculation_type: "expression"
        calculation:
          # Conditional pricing: if quantity >= 100 then bulk rate, else standard rate
          formula_components: [
            {
              "condition": {
                "column": "Order Quantity",
                "operator": ">=", 
                "value": 100
              },
              "if_true": ["Unit Price", "*", "Order Quantity", "*", "0.85"],
              "if_false": ["Unit Price", "*", "Order Quantity"]
            }
          ]

mixed_conditional_example:
  description: "Complex business logic with multiple conditions and calculations"
  yaml: |
    # Calculate shipping cost with customer tier discounts and weight factors
    
    settings:
      description: "Complex shipping calculation with multiple business rules"
      stages:
        - stage_name: "shipping_data"
          description: "Orders with customer and weight data"
          protected: false
        - stage_name: "final_shipping"
          description: "Orders with calculated shipping costs"
          protected: false
    
    recipe:
      - step_description: "Calculate shipping with tier discounts and weight factors"
        processor_type: "add_calculated_column"
        source_stage: "shipping_data"
        save_to_stage: "final_shipping"
        new_column: "Shipping_Cost"
        calculation_type: "expression"
        calculation:
          # Base shipping + weight surcharge - customer discount
          formula_components: [
            "15.00", "+",
            {
              "condition": {
                "column": "Package Weight (lbs)",
                "operator": ">",
                "value": 50
              },
              "if_true": [["Package Weight (lbs)", "-", "50"], "*", "0.25"],
              "if_false": "0"
            },
            "-",
            {
              "condition": {
                "column": "Customer Tier",
                "operator": "==",
                "value": "Premium"
              },
              "if_true": "5.00",
              "if_false": "0"
            }
          ]

string_conditions_example:
  description: "String-based conditions with contains and membership operations"
  yaml: |
    # Categorize products based on name patterns and categories
    
    settings:
      description: "Product categorization using string matching"
      stages:
        - stage_name: "product_data"
          description: "Product catalog data"
          protected: false
        - stage_name: "categorized_products"
          description: "Products with calculated categories"
          protected: false
    
    recipe:
      - step_description: "Assign product categories based on name and type"
        processor_type: "add_calculated_column"
        source_stage: "product_data"
        save_to_stage: "categorized_products"
        new_column: "Product_Category"
        calculation_type: "expression"
        calculation:
          formula_components: [
            {
              "condition": {
                "column": "Product Name",
                "operator": "contains",
                "value": "Premium"
              },
              "if_true": "'High-End'",
              "if_false": {
                "condition": {
                  "column": "Product Type",
                  "operator": "in",
                  "value": ["Electronics", "Computers", "Mobile"]
                },
                "if_true": "'Technology'",
                "if_false": "'Standard'"
              }
            }
          ]

legacy_formula_example:
  description: "Legacy formula syntax (still supported but limited)"
  yaml: |
    # Legacy string-based formula (has limitations with column names containing spaces)
    
    settings:
      description: "Legacy formula approach for simple cases"
      stages:
        - stage_name: "simple_data"
          description: "Data with simple column names"
          protected: false
        - stage_name: "calculated_data"
          description: "Data with calculations"
          protected: false
    
    recipe:
      - step_description: "Calculate using legacy formula syntax"
        processor_type: "add_calculated_column"
        source_stage: "simple_data"
        save_to_stage: "calculated_data"
        new_column: "Total"
        calculation_type: "expression"
        calculation:
          # Legacy formula - works only with simple column names (no spaces/special chars)
          # For robust column name handling, use formula_components instead
          formula: "Price * Quantity"

parameter_details:
  formula_components:
    type: list
    required: false (alternative to formula)
    description: "Robust list-based formula specification that handles any column names"
    examples:
      - ["Price", "*", "Quantity"]
      - [["Revenue", "-", "Cost"], "/", "Revenue", "*", "100"]
      - [{"condition": {...}, "if_true": [...], "if_false": [...]}]
    note: "Recommended over 'formula' for reliability with complex column names"
  
  formula:
    type: string  
    required: false (alternative to formula_components)
    description: "Legacy string-based formula (limited column name support)"
    examples: ["Price * Quantity", "Revenue - Cost"]
    note: "Use formula_components for column names with spaces or special characters"

formula_components_syntax:
  basic_operations:
    description: "Simple arithmetic between columns and values"
    examples:
      - ["Column_A", "+", "Column_B"]
      - ["Price", "*", "1.1"]
      - ["Quantity", "-", "5"]
  
  grouping:
    description: "Use nested lists to create grouped operations (parentheses)"
    examples:
      - [["A", "+", "B"], "*", "C"]  # (A + B) * C
      - [["Revenue", "-", "Cost"], "/", ["Units", "+", "1"]]  # (Revenue - Cost) / (Units + 1)
  
  conditionals:
    description: "If-then-else logic using dictionary structure"
    structure: |
      {
        "condition": {
          "column": "column_name",
          "operator": "comparison_operator", 
          "value": "comparison_value"
        },
        "if_true": formula_components_for_true_case,
        "if_false": formula_components_for_false_case  
      }
    operators: ["==", "!=", "<", ">", "<=", ">=", "in", "not_in", "contains", "not_contains"]
  
  nested_conditions:
    description: "Complex nested conditional logic"
    example: |
      {
        "condition": {"column": "Tier", "operator": "==", "value": "Premium"},
        "if_true": ["Base_Price", "*", "0.9"], 
        "if_false": {
          "condition": {"column": "Quantity", "operator": ">", "value": 100},
          "if_true": ["Base_Price", "*", "0.95"],
          "if_false": "Base_Price"
        }
      }

migration_guide:
  from_legacy_formula:
    old_syntax: 'formula: "Price * Net Weight"'
    new_syntax: 'formula_components: ["Price", "*", "Net Weight"]'
    benefits: "Handles column names with spaces, quotes, and special characters"
  
  complex_migration:
    old_syntax: 'formula: "(Revenue - Cost) / Revenue * 100"'
    new_syntax: 'formula_components: [["Revenue", "-", "Cost"], "/", "Revenue", "*", "100"]'
    benefits: "Explicit grouping, no parsing ambiguity"
