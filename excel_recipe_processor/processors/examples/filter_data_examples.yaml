description: "Filter DataFrame rows based on specified conditions with support for multiple filter types"

basic_example:
  description: "Simple filtering with single condition"
  yaml: |
    # Filter data to keep only rows matching condition
    
    -       # OPT - Human-readable description of what this step does
      # Default value: "Unnamed filter_data step"
      step_description: "Filter for active customers only"
      # REQ - Must be "filter_data" for this processor type
      processor_type: "filter_data"
      # REQ - List of filter conditions to apply
      # All filters are applied with AND logic (all must be true)
      filters:
        - # REQ - Column name to filter on
          column: "Status"
          # REQ - Condition type to apply
          # Available: equals, not_equals, contains, not_contains, greater_than, less_than, greater_equal, less_equal, is_empty, not_empty, in_list, not_in_list
          condition: "equals"
          # REQ - Value to compare against (required for most conditions)
          # Not needed for: is_empty, not_empty
          value: "Active"

multiple_filters_example:
  description: "Multiple filters applied with AND logic"
  yaml: |
    # Apply multiple filters - all must be true (AND logic)
    
    -       # OPT - Step description
      # Default value: "Unnamed filter_data step"
      step_description: "Filter for high-value active customers"
      # REQ - Processor type
      processor_type: "filter_data"
      # REQ - List of filters to apply
      filters:
        # First filter: must be active
        - # REQ - Column to filter
          column: "Status"
          # REQ - Condition type
          condition: "equals"
          # REQ - Value to match
          value: "Active"
        
        # Second filter: must have high order value
        - # REQ - Column to filter
          column: "Total_Order_Value"
          # REQ - Numeric comparison condition
          condition: "greater_than"
          # REQ - Numeric value for comparison
          value: 1000
        
        # Third filter: must be in specific regions
        - # REQ - Column to filter
          column: "Region"
          # REQ - List membership condition
          condition: "in_list"
          # REQ - List of acceptable values
          value: ["North", "South", "East", "West"]

text_filtering_example:
  description: "Text-based filtering with contains and not_contains conditions"
  yaml: |
    # Filter based on text content in columns
    
    -       # OPT - Step description
      # Default value: "Unnamed filter_data step"
      step_description: "Filter products containing salmon, exclude canned items"
      # REQ - Processor type
      processor_type: "filter_data"
      # REQ - Text-based filters
      filters:
        # Include products containing "SALMON"
        - # REQ - Product description column
          column: "Product_Description"
          # REQ - Text contains condition (case-sensitive)
          condition: "contains"
          # REQ - Text to search for
          value: "SALMON"
        
        # Exclude canned products
        - # REQ - Product type column
          column: "Product_Type"
          # REQ - Text does not contain condition
          condition: "not_contains"
          # REQ - Text to exclude
          value: "CANNED"

empty_null_filtering_example:
  description: "Filter based on empty or null values"
  yaml: |
    # Filter to remove or keep rows with empty/null values
    
    -       # OPT - Step description
      # Default value: "Unnamed filter_data step"
      step_description: "Remove incomplete records"
      # REQ - Processor type
      processor_type: "filter_data"
      # REQ - Filters for empty/null checking
      filters:
        # Must have customer name
        - # REQ - Column to check
          column: "Customer_Name"
          # REQ - Not empty condition (no value parameter needed)
          condition: "not_empty"
        
        # Must have email address
        - # REQ - Column to check
          column: "Email"
          # REQ - Not empty condition (no value parameter needed)
          condition: "not_empty"

parameter_details:
  filters:
    type: list
    required: true
    description: "List of filter conditions to apply to the DataFrame"
    structure: "Each filter is a dictionary with column, condition, and value (if needed)"
    logic: "All filters use AND logic - all conditions must be true for a row to be kept"
  
  filter_structure:
    column:
      type: string
      required: true
      description: "Name of the column to filter on"
      examples: ["Status", "Product_Name", "Price", "Region"]
    
    condition:
      type: string
      required: true
      description: "Type of comparison to perform"
      options:
        - "equals"
        - "not_equals" 
        - "contains"
        - "not_contains"
        - "greater_than"
        - "less_than"
        - "greater_equal"
        - "less_equal"
        - "is_empty"
        - "not_empty"
        - "in_list"
        - "not_in_list"
    
    value:
      type: any
      required: "conditional"
      description: "Value to compare against (not needed for is_empty/not_empty)"
      examples: 
        - '"Active"'
        - '100'
        - '["North", "South"]'
        - '"2024-01-01"'

filter_logic_notes:
  and_logic: "Multiple filters are combined with AND logic - all must be true"
  case_sensitivity: "Text conditions (contains, not_contains) are case-sensitive"
  data_types: "Numeric conditions work with numeric columns, date conditions with date strings"
  empty_values: "is_empty and not_empty conditions don't require a value parameter"
  list_conditions: "in_list and not_in_list require value to be a list"

common_use_cases:
  data_quality: "Remove rows with missing required fields"
  business_rules: "Apply business logic to include/exclude records"
  date_ranges: "Filter for specific time periods using date comparisons"
  category_filtering: "Include/exclude specific categories or types"
  numeric_thresholds: "Filter based on value ranges or minimums"
  text_patterns: "Include/exclude based on text content or patterns"
